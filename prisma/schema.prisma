generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("SQL_URI")
}

model User {
  id            Int                       @id @default(autoincrement())
  username      String                    @unique @db.VarChar(255)
  isGuest       Boolean                   @default(false)
  password      String                    @db.VarChar(255)
  isDeleted     Boolean                   @default(false)
  createdAt     DateTime                  @default(now())
  conversations ConversationParticipant[]
  messages      Message[]                 @relation("UserMessages")
  profile       Profile?
  messageReads  MessageRead[]

  @@map("users")
}

model Profile {
  id             Int          @id @default(autoincrement())
  firstName      String?       @db.VarChar(100)
  surName        String?       @db.VarChar(100)
  profileSummary String?       @db.VarChar(1000)
  userId         Int           @unique

  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("profile")
}

model Message {
  id             Int          @id @default(autoincrement())
  content        String?       @db.VarChar(1000)
  imageUrl       String? 
  createdAt      DateTime     @default(now())
  senderId       Int?
  conversationId Int
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  sender         User?        @relation("UserMessages", fields: [senderId], references: [id], onDelete: SetNull)
  reads          MessageRead[]

  @@map("message")
}

model Conversation {
  id           Int                       @id @default(autoincrement())
  createdAt    DateTime                  @default(now())
  name         String?   @db.VarChar(255)
  isGroup      Boolean   @default(false)
  participants ConversationParticipant[]
  messages     Message[]

  @@map("conversation")
}

model ConversationParticipant {
  id             Int          @id @default(autoincrement())
  userId         Int?
  conversationId Int
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  user           User?        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, conversationId])
  @@map("conversation_participant")
}

model MessageRead {
  id         Int      @id @default(autoincrement())
  messageId  Int
  userId     Int
  readAt     DateTime @default(now())

  message    Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([messageId, userId])
  @@map("message_read")
}